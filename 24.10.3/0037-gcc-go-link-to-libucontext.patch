From a3042080b3e5e614d0c645b44b123936a8b6a908 Mon Sep 17 00:00:00 2001
From: esaaprillia <esaapriliasalsabila@gmail.com>
Date: Mon, 29 Sep 2025 05:13:15 +0800
Subject: [PATCH] Update Make-lang.in

---
 gcc/go/Make-lang.in | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/gcc/go/Make-lang.in b/gcc/go/Make-lang.in
index a1f2977..1ede8c5 100644
--- a/gcc/go/Make-lang.in
+++ b/gcc/go/Make-lang.in
@@ -83,7 +83,7 @@ go_OBJS = $(GO_OBJS) go/gospec.o
 go1$(exeext): $(GO_OBJS) attribs.o $(BACKEND) $(LIBDEPS) $(go.prev)
 	@$(call LINK_PROGRESS,$(INDEX.go),start)
 	+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \
-	      $(GO_OBJS) attribs.o $(BACKEND) $(LIBS) $(BACKENDLIBS)
+	      $(GO_OBJS) attribs.o $(BACKEND) $(LIBS) $(BACKENDLIBS) -lucontext
 	@$(call LINK_PROGRESS,$(INDEX.go),end)
 
 # Documentation.

Similar to Solaris, libucontext does not clear the stack below makecontext.
This causes the Go frontend to sometimes go below the stack.

On 32-bit Arm systems, this resulted in #832.  It is likely, though not known,
that this could have caused other issues we've seen in gccgo as well.

Additionally, since we strip libgo.so, filename is always NULL.  This caused
the unwinder to continue through runtime_mstart which caused the same issue.
--- a/libgo/runtime/go-callers.c.old	2023-01-01 17:56:27.302982459 -0600
+++ b/libgo/runtime/go-callers.c	2023-01-01 17:58:00.612903483 -0600
@@ -165,26 +165,11 @@
   if (function != NULL)
     {
-      if (__builtin_strcmp (function, "makecontext") == 0)
+      if (__builtin_strcmp (function, "makecontext") == 0
+          || __builtin_strcmp (function, "libucontext_makecontext") == 0
+          || __builtin_strcmp (function, "runtime_mstart") == 0
+          || __builtin_strcmp (function, "runtime.kickoff") == 0
+          || __builtin_strcmp (function, "runtime.main") == 0)
 	return 1;
-      if (filename != NULL)
-	{
-	  const char *p;
-
-	  p = strrchr (filename, '/');
-	  if (p == NULL)
-	    p = filename;
-	  if (__builtin_strcmp (p, "/proc.c") == 0)
-	    {
-	      if (__builtin_strcmp (function, "runtime_mstart") == 0)
-		return 1;
-	    }
-	  else if (__builtin_strcmp (p, "/proc.go") == 0)
-	    {
-	      if (__builtin_strcmp (function, "runtime.kickoff") == 0
-		  || __builtin_strcmp (function, "runtime.main") == 0)
-		return 1;
-	    }
-	}
     }
 
   return arg->index >= arg->max;
